#include "Header.h"


void RenderObject::PrepareBuffer(){
    glGenFramebuffers(1,&FrameBuffer);
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);

    glGenTextures(1,&ColorTexture);
    glBindTexture(GL_TEXTURE_2D,ColorTexture);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
    glTexImage2D(GL_TEXTURE_2D,0,ColorBitDepth,RenderWidth,RenderHeight,0,GL_RGBA,GL_FLOAT,NULL);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D,0);

     glGenTextures(1,&ColorDisplayTexture);
    glBindTexture(GL_TEXTURE_2D,ColorDisplayTexture);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
    glTexImage2D(GL_TEXTURE_2D,0,ColorBitDepth,RenderWidth,RenderHeight,0,GL_RGBA,GL_FLOAT,NULL);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D,0);

    glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,ColorTexture,0);
    GLuint buff[3]={GL_COLOR_ATTACHMENT0};
    glDrawBuffers(1,buff);
    if(B3D_Rendering){
         glGenTextures(1,&ZbufferTexture);
        glBindTexture(GL_TEXTURE_2D,ZbufferTexture);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_DEPTH_COMPONENT32F, RenderWidth, RenderHeight);
        glTexImage2D(GL_TEXTURE_2D,0,ZBitDepth,RenderWidth,RenderHeight,0,GL_DEPTH_COMPONENT,GL_FLOAT,NULL);
        glBindTexture(GL_TEXTURE_2D,0);

        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_TEXTURE_2D,ZbufferTexture,0);

    }
    GLenum test=glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if(test!=GL_FRAMEBUFFER_COMPLETE){
        ConsoleEcho("FrameBuffer incomplet\0");
        BufferInited=false;
    }else{
        ConsoleEcho("FrameBuffer complet\0");
        BufferInited=true;
    }
}
void RenderObject::PrepareSamplingBuffer(int Sample){
    MSAA_Sample=Sample;
    glEnable( GL_MULTISAMPLE );
    glGenFramebuffers(1,&FrameBuffer);
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);

    glGenTextures(1,&ColorTexture);
    glBindTexture(GL_TEXTURE_2D_MULTISAMPLE,ColorTexture);
    //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
    glTexImage2DMultisample(GL_TEXTURE_2D_MULTISAMPLE,MSAA_Sample,ColorBitDepth,RenderWidth,RenderHeight,GL_FALSE);
    glBindTexture(GL_TEXTURE_2D,0);

    glGenTextures(1,&ColorDisplayTexture);
    glBindTexture(GL_TEXTURE_2D,ColorDisplayTexture);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
    glTexImage2D(GL_TEXTURE_2D,0,ColorBitDepth,RenderWidth,RenderHeight,0,GL_RGBA,GL_FLOAT,NULL);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D,0);

    glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D_MULTISAMPLE,ColorTexture,0);
    GLuint buff[3]={GL_COLOR_ATTACHMENT0};
    glDrawBuffers(1,buff);
    if(B3D_Rendering){
        glGenTextures(1,&ZbufferTexture);
        glBindTexture(GL_TEXTURE_2D,ZbufferTexture);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_DEPTH_COMPONENT32F, RenderWidth, RenderHeight);
        glTexImage2D(GL_TEXTURE_2D,0,ZBitDepth,RenderWidth,RenderHeight,0,GL_DEPTH_COMPONENT,GL_FLOAT,NULL);
        glBindTexture(GL_TEXTURE_2D,0);

        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_TEXTURE_2D,ZbufferTexture,0);

    }
    GLenum test=glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if(test!=GL_FRAMEBUFFER_COMPLETE){
        ConsoleEcho("FrameBuffer incomplet\0");
        BufferInited=false;
    }else{
        ConsoleEcho("FrameBuffer complet\0");
        BufferInited=true;
    }

}

void RenderObject::DefineMainShaderProgram(GLuint* PrgAdress,GLuint* PrgType,int n){
    if(IsShaderReady()){
        SetActiveInternProgram(PrgAdress,PrgType,n);
        if(IsShaderProgramSet()){
            RenderShaderAdress=PrgAdress;
            RenderShaderType=PrgType;
            RenderShaderN=n;
            RenderDefaultProgramInitied=true;
        }
    }
};
void RenderObject::RestoreMainShader(){
    if(RenderDefaultProgramInitied){
        InternSetActiveInternProgram(RenderShaderAdress,RenderShaderType,RenderShaderN);
    }
}
void RenderObject::ClearMainShader(bool del){

    RenderDefaultProgramInitied=false;
    if(del){
        for(int i=0;i<n;i++){
            DeleteProgram(RenderShaderAdress[i]);
        }
    }
    delete RenderShaderAdress;
    delete RenderShaderType;
}
void RenderObject::ClearMainShader(bool del){

    RenderPPProgramInitied=false;
    if(del){
        for(int i=0;i<n;i++){
            DeleteProgram(RenderPPShaderAdress[i]);
        }
    }

}


void RenderObject::DefinePPShaderProgram(GLuint* PrgAdress,GLuint* PrgType,int n){
    if(IsShaderReady()){
        SetActiveInternProgram(PrgAdress,PrgType,n);
        if(IsShaderProgramSet()){
            RenderPPShaderAdress=PrgAdress;
            RenderPPShaderType=PrgType;
            RenderPPShaderN=n;
            RenderPPProgramInitied=true;
        }
    }
};
void RenderObject::RestorePPShader(){
    if(RenderPPProgramInitied){
        InternSetActiveInternProgram(RenderPPShaderAdress,RenderPPShaderType,RenderPPShaderN);
    }
}
void RenderObject::PrepareRenderTarget(){
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
    glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,ColorDisplayTexture,0);
}

bool RenderObject::CallRender(){
    WaitForSingleObject(RenderHung,INFINITE);
    if(SourceBound && BufferInited){
        RenderObject* me=static_cast<RenderObject*>(this);
        if(!SourceInitied){
            SourceInitied=Source->RenderInit(me);
        }
        if(SourceInitied){
            ActivatePipeline();
            EnableRenderMethod();
            RestoreMainShader();

            if(RenderPostProcActivated){
                //Les fonction sont par défault dans le contexte habituelle
                RenderInFrameBuffer();
                if(AutoCleanBuffer)CleanBuffer();
                Source->RenderUpdate(me);
                RestorePPShader();
                //Les fonction de fin de pipeline sont de base dans le contexte de Rendu
                PrepareRenderTarget();
                if(AutoCleanBuffer)CleanBuffer();
                Source->RenderPostProc(me);
            }else{
                PrepareRenderTarget();
                if(AutoCleanBuffer)CleanBuffer();
                Source->RenderUpdate(me);
            }
            FinishRender();
        }
    }else{
        glBindProgramPipeline(0);
        //ConsoleEcho("et hop un Rendu");
        PrepareRenderTarget();
        if(AutoCleanBuffer)CleanBuffer();
        EnableRenderMethod();
        glMatrixMode(GL_MODELVIEW);
            glLoadIdentity();
            glRotatef(theta, 0.0f, 0.0f, 1.0f);

            glBegin(GL_TRIANGLES);
            //glBegin(GL_POINTS);
                glColor3f(1.0f, 0.0f, 0.0f);   glVertex3f(0.0f,   1.0f,1.0);
            //glEnd();

            //glBegin(GL_POINTS);
                glColor3f(0.0f, 1.0f, 0.0f);   glVertex3f(0.87f,  -0.5f,1.0f);
            //glEnd();

            //glBegin(GL_POINTS);
                glColor3f(0.0f, 0.0f, 1.0f);   glVertex3f(-0.87f, -0.5f,1.0f);
            glEnd();

            theta += 1.0f;
        FinishRender();
    }

    ReleaseMutex(RenderHung);
}
void RenderObject::RenderInFrameBuffer(){
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
     glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,ColorTexture,0);
}

bool RenderObject::BindRenderSource(RenderSource*Src){
    Source=Src;
    //RenderObject* me=static_cast<RenderObject*>(this);
    SourceInitied=false;
    SourceBound=true;
    ConsoleEcho("Binding compltement fini");
    RenderPostProcActivated=Src->IsPostProcess();
}

void RenderObject::UnbindRenderSource(){
    if(SourceInitied){
        RenderObject* me=static_cast<RenderObject*>(this);
        Source->RenderOnQuit(me);
        SourceInitied=false;
    }
    Source=nullptr;
    SourceBound=false;
}
bool RenderObject::AskGlContext(){
    ConsoleEcho("Tentative d'envoie de Context");
    if(Context_Initied){
        ConsoleEcho("Tentative d'envoie de Context : Initialisation Confirmé");
        bool A=wglMakeCurrent(DeviceContext,SharedRenderContext);
        NoticeError();
        return A;

    }else return false;

}


void RenderObject::CleanBuffer(){
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
    glClearColor(0.0f,0.0f,0.0f,0.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glClearDepthf(pow(10,16));
    if(B3D_Rendering)glClear(GL_DEPTH_BUFFER_BIT);
}
void RenderObject::DeleteBuffer(){
    if(BufferInited){
        glDeleteFramebuffers(1,&FrameBuffer);
        GLuint tex[2]={ColorTexture,ZbufferTexture};
        glDeleteTextures(2,tex);
        BufferInited=false;
    }
}

void RenderObject::SwapBufferRule(int RW,int RH,int sample,GLuint* TextureType,GLuint* TextureIndex,int N){
    if(BufferInited){
        DeleteBuffer();
    }
    RenderWidth=RW;
    RenderHeight=RH;
    MSAA_Sample=sample;
    if(MSAA_Sample>0){
         glEnable( GL_MULTISAMPLE );
        glGenFramebuffers(1,&FrameBuffer);
        glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);

        glGenTextures(1,&ColorTexture);
        glBindTexture(GL_TEXTURE_2D_MULTISAMPLE,ColorTexture);
        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
        glTexImage2DMultisample(GL_TEXTURE_2D_MULTISAMPLE,MSAA_Sample,ColorBitDepth,RenderWidth,RenderHeight,GL_FALSE);
        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D_MULTISAMPLE,ColorTexture,0);

        glGenTextures(1,&ColorDisplayTexture);
        glBindTexture(GL_TEXTURE_2D,ColorDisplayTexture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
        glTexImage2D(GL_TEXTURE_2D,0,ColorBitDepth,RenderWidth,RenderHeight,0,GL_RGBA,GL_FLOAT,NULL);
        glGenerateMipmap(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D,0);

        GLuint* buff=new GLuint[N+1];
        buff[0]=GL_COLOR_ATTACHMENT0;
        for(int i=0;i<N;i++){
            glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1+i,TextureType[i],TextureIndex[i],0);
            buff[1+i]=GL_COLOR_ATTACHMENT0+i;
        }
        glDrawBuffers(N+1,buff);
        delete buff;
        if(B3D_Rendering){
            glGenTextures(1,&ZbufferTexture);
            glBindTexture(GL_TEXTURE_2D,ZbufferTexture);

            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

            //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_DEPTH_COMPONENT32F, RenderWidth, RenderHeight);
            glTexImage2D(GL_TEXTURE_2D,0,ZBitDepth,RenderWidth,RenderHeight,0,GL_DEPTH_COMPONENT,GL_FLOAT,NULL);
            glBindTexture(GL_TEXTURE_2D,0);

            glFramebufferTexture2D(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_TEXTURE_2D,ZbufferTexture,0);
        }
        BufferInited=true;
    }else{
        glDisable(GL_MULTISAMPLE);
        glGenFramebuffers(1,&FrameBuffer);
        glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);

        glGenTextures(1,&ColorTexture);
        glBindTexture(GL_TEXTURE_2D,ColorTexture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
        glTexImage2D(GL_TEXTURE_2D,0,ColorBitDepth,RenderWidth,RenderHeight,0,GL_RGBA,GL_FLOAT,NULL);
        glGenerateMipmap(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D,0);

        glGenTextures(1,&ColorDisplayTexture);
        glBindTexture(GL_TEXTURE_2D,ColorDisplayTexture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_RGBA32F, RenderWidth, RenderHeight);
        glTexImage2D(GL_TEXTURE_2D,0,ColorBitDepth,RenderWidth,RenderHeight,0,GL_RGBA,GL_FLOAT,NULL);
        glGenerateMipmap(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D,0);

        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,ColorTexture,0);
        //on met les Donnné des buffer proposé en mémoire
        GLuint* buff=new GLuint[N+1];
        buff[0]=GL_COLOR_ATTACHMENT0;
        for(int i=0;i<N;i++){
            glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1+i,TextureType[i],TextureIndex[i],0);
            buff[1+i]=GL_COLOR_ATTACHMENT1+i;
        }
        glDrawBuffers(N+1,buff);
        delete buff;
        if(B3D_Rendering){
            glGenTextures(1,&ZbufferTexture);
            glBindTexture(GL_TEXTURE_2D,ZbufferTexture);

            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

            //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_DEPTH_COMPONENT32F, RenderWidth, RenderHeight);
            glTexImage2D(GL_TEXTURE_2D,0,ZBitDepth,RenderWidth,RenderHeight,0,GL_DEPTH_COMPONENT,GL_FLOAT,NULL);
            glBindTexture(GL_TEXTURE_2D,0);

            glFramebufferTexture2D(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_TEXTURE_2D,ZbufferTexture,0);
        }
        BufferInited=true;
    }


}
void RenderObject::ResizeRender(int H, int W){

}


void RenderObject::DefineDrawBuffer(GLuint* TextureType,GLuint* TextureIndex,int N){
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
    GLuint* buff=new GLuint[N+1];
    buff[0]=GL_COLOR_ATTACHMENT0;
    for(int i=0;i<N;i++){
        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1+i,TextureType[i],TextureIndex[i],0);
        buff[1+i]=GL_COLOR_ATTACHMENT0+i;
    }
    glDrawBuffers(N+1,buff);
    delete buff;

}

void RenderObject::EnableRenderMethod(){
    if(MSAA_Sample>0){
        glEnable(GL_MULTISAMPLE);
    }else{
        glDisable(GL_MULTISAMPLE);
    }

    if(B3D_Rendering){
        glEnable(GL_DEPTH_TEST);
    }else{
        glDisable(GL_DEPTH_TEST);
    }
}

RenderObject::RenderObject(){
    RenderHung=CreateMutex(NULL,false,NULL);
}

RenderObject::~RenderObject(){
    CloseHandle(RenderHung);
    if(RenderDefaultProgramInitied){
        delete RenderShaderAdress;
        delete RenderShaderType;
    }
    if(RenderPPProgramInitied){
        delete RenderPPShaderAdress;
        delete RenderPPShaderType;
    }
}

void RenderObject::ClearColor(){
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
    glClearColor(0.0,0.0,0.0,0.0);
    glClear(GL_COLOR_BUFFER_BIT);
}
void RenderObject::ClearDepth(){
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
    glClear(GL_DEPTH_BUFFER_BIT);
}

void RenderObject::DefineAutoClean(bool state){
    WaitForSingleObject(RenderHung,INFINITE);
    AutoCleanBuffer=state;
    ReleaseMutex(RenderHung);
}

void RenderObject::Define3dRender(bool state){
    if(state && !B3D_Rendering){
        B3D_Rendering=true;
        glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
        glGenTextures(1,&ZbufferTexture);
        glBindTexture(GL_TEXTURE_2D,ZbufferTexture);

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

        //glTexStorage2D(GL_TEXTURE_2D, 1 ,GL_DEPTH_COMPONENT32F, RenderWidth, RenderHeight);
        glTexImage2D(GL_TEXTURE_2D,0,ZBitDepth,RenderWidth,RenderHeight,0,GL_DEPTH_COMPONENT,GL_FLOAT,NULL);
        NoticeGlError();
        glBindTexture(GL_TEXTURE_2D,0);

        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_TEXTURE_2D,ZbufferTexture,0);
        NoticeGlError(true);


    }else if(!state && B3D_Rendering){
       glDeleteTextures(1,&ZbufferTexture);
       B3D_Rendering=false;
    }
}

void RenderObject::AddBufferRule(GLuint Color,GLuint Type,GLuint BufferFormat,float Ratio){
DrawBuffer rule={Color,Type,BufferFormat,Ratio,false,0};
DrawBuffers.push_back(rule);
}

void RenderObject::ActivateBufferRule(bool Force){
    GLenum* DBufr=new GLenum[DrawBuffers.size()+1];
    DBufr[0]=GL_COLOR_ATTACHMENT0;
    int I=1;
    glBindFramebuffer(GL_FRAMEBUFFER,FrameBuffer);
    for(std::vector<DrawBuffer>::iterator A=DrawBuffers.begin();A!=DrawBuffers.end();A++){
        if(Force && A->Initied){
            glDeleteBuffers(1,&(A->Buffer));
            A->Initied=false;
        }
        if(!A->Initied){
            int W,H;
            W=RenderWidth*A->Ratio;
            H=RenderHeight*A->Ratio;
            glGenTextures(1,&(A->Buffer));
            glBindTexture(A->TextureType,A->Buffer);
            glTexParameteri(A->TextureType, GL_TEXTURE_WRAP_S, GL_REPEAT);
            glTexParameteri(A->TextureType, GL_TEXTURE_WRAP_T, GL_REPEAT);
            glTexParameteri(A->TextureType, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
            glTexParameteri(A->TextureType, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
            glTexImage2D(A->TextureType,0,A->ColorRes,W,H,0,A->BufferFormat,GL_FLOAT,NULL);
            glBindTexture(A->TextureType,0);
            A->Initied=true;
        glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0+I,A->TextureType,A->Buffer,0);
        DBufr[I]=GL_COLOR_ATTACHMENT0+I;
        I++;
        }
    }
    glDrawBuffers(I+1,DBufr);

}

GLuint RenderObject::AccessBuffer(GLuint N){
    std::vector<DrawBuffer>::iterator Itt=DrawBuffers.begin();
    return N>0? (Itt+(N-1))->Buffer:Itt->Buffer;
}

void RenderObject::CleanBufferRule(){
    for(std::vector<DrawBuffer>::iterator A=DrawBuffers.begin();A!=DrawBuffers.end();A++){
        if(A->Initied){
            glDeleteBuffers(1,&(A->Buffer));
        }
    }
    DrawBuffers.clear();
}

void RenderObject::CleanBufferRule(GLuint N){
    std::vector<DrawBuffer>::iterator Itt=DrawBuffers.begin();
    if(N>0)Itt+=(N-1);
    if(Itt->Initied)
        glDeleteBuffers(1,&(Itt->Buffer));
    DrawBuffers.erase(Itt);
}
